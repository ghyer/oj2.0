//mysql class
class Mysqlc {
private:
    Connection conn;
public:
    ~Mysqlc () {
        delete this;
    }
    void updateCompile (int sid, FILE *fp) {
        string compile_info = " ";
        char buf[1000];
        while (fgets(buf, sizeof(buf), fp) != NULL) {
            compile_info += (string) buf;
        }
        cout << compile_info << endl;
    }
    void load (Config &conf) {
        if (conn.connect(conf.get("DB_NAME"), conf.get("DB_URL"), conf.get("DB_USER"), conf.get("DB_PASS"), strToInt(conf.get("DB_PORT")))){
            cout << "Client: Success to connect to database!" << endl;
        } else {
            cout << "Client: Connect to database fail!" << endl;
        }
    }
    int getProblemId (int solution_id) {
        Query query = conn.query("SELECT problem_id FROM solution WHERE solution_id=%0q");
        query.parse();
        StoreQueryResult res = query.store(intToStr(solution_id));
        Row line = res[0];
        return line["problem_id"];
    }
    pair<int,int> getLimit (int problem_id) {
        Query query = conn.query("SELECT memory_limit,time_limit FROM problem WHERE problem_id=%0q");
        query.parse();
        StoreQueryResult res = query.store(intToStr(problem_id));
        Row line = res[0];
        return make_pair(line["memory_limit"],line["time_limit"]);
    }
    string getCode (int solution_id) {
        Query query = conn.query("SELECT source FROM source_code WHERE solution_id=%0q");
        query.parse();
        StoreQueryResult res = query.store(intToStr(solution_id));
        Row line = res[0];
        return (string)line["source"];
    }
};
