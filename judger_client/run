void run (Mysqlc &db, Config &config, Client &client, dirent **&in_list, dirent **&out_list, passwd *&ju, int &sid, int &cnt) {
    // Running for test
    int pid;
    int status;
    // for test1 to testN
    for (int i = 0; i < cnt; i ++) {
        pid = fork();
        if (pid < 0) {
            throwError(FORK_ERROR);
        } else if (pid == 0) {
            //Set limit
            setLimit(client.getTime(), client.getMemory(), ju);

            FILE *input = NULL;
            FILE *output = NULL;
            input = freopen(("/data/" + (string)(in_list[i] -> d_name)).c_str(), "r", stdin);
            output = freopen("ans.out", "w", stdout);
            if (input == NULL || output == NULL) {
                throwError(FREOPEN_ERROR);
            }

            // errno = 0;
            execl("/main", "main", NULL);
            close(fileno(input));
            close(fileno(output));
            // cout << errno << endl;
            throwError(EXEC_ERROR);
        } else {
            int stat;
            int dieid;
            string test;
            rusage usage;
            int time_used;
            int memory_used;
            bool diff = false;
            while (true) {
                dieid = wait4(pid, &stat, WUNTRACED, &usage);
                if (dieid == -1) {
                    // Check errno for more details.
                    throwError(WAIT4_ERROR);
                }
                // Child process exit normally.
                if (WIFEXITED(stat)) {
                    time_used = usage.ru_utime.tv_sec  * 1000 
                              + usage.ru_utime.tv_usec / 1000
                              + usage.ru_stime.tv_sec  * 1000
                              + usage.ru_stime.tv_usec / 1000;
                    memory_used = usage.ru_maxrss / 1024;
                    client.updateTime(time_used);
                    client.updateMemory(memory_used);

                    // cout << time_used << "ms" << endl;
                    // cout << memory_used << "MB" << endl;

                    if (memory_used > client.getMemory()) {
                        // cout << "MLE" ;
                        db.setResult(sid, MLE);
                        break;
                    }
                    diff = true;
                    break;
                }
                if (WIFSIGNALED(stat)) {
                    ptrace(PTRACE_KILL, pid, NULL, NULL);
                    time_used = usage.ru_utime.tv_sec  * 1000 
                              + usage.ru_utime.tv_usec / 1000
                              + usage.ru_stime.tv_sec  * 1000
                              + usage.ru_stime.tv_usec / 1000;
                    memory_used = usage.ru_maxrss / 1024;
                    client.updateTime(time_used);
                    client.updateMemory(memory_used);

                    // cout << time_used << "ms" << endl;
                    // cout << memory_used << "MB" << endl;

                    status = WTERMSIG(stat);
                    if (status == SIGALRM || status == SIGXCPU) {
                        // cout << "TLE" ;
                        db.setResult(sid, TLE);
                        break;
                    } else if (status == SIGSEGV) {
                        // cout << "MLE1" ;
                        db.setResult(sid, MLE);
                        break;
                    } else {
                        // cout << "RE" ;
                        db.setResult(sid, RE);
                        break;
                    }
                }
                //continue pid process
                ptrace(PTRACE_CONT, pid, NULL, NULL);
            }
            if (diff) {
                test = (string)"/data/" + (string)(out_list[i] -> d_name);
                status = diffTwoFile("ans.out", test.c_str());
                if (status == AC) {
                    // cout << "AC" ;
                    db.setResult(sid, AC);
                    client.addScore();
                } else if (status == WA) {
                    db.setResult(sid, WA);
                    // cout << "WA" ;
                } else if (status == PE) {
                    db.setResult(sid, PE);
                    // cout << "PE";
                }
            }
        }
    }
}