//Judger class, running of scheduling subprogram.
class Judger {
private:
    int solution_id[1000];
    int running_pid[100];
    int cnt;
    int max_running;
public:
    Judger () {
        memset(running_pid, -1, sizeof(running_pid));
    }
    void load (Config &conf) {
        max_running    = strToInt(conf.get("MAX_RUNNING"));
    }
    void add (StoreQueryResult &submit) {
        StoreQueryResult::const_iterator it;
        int i = 0;
        Row line;
        for (it = submit.begin(); it != submit.end(); it ++) {
            line = *it;
            solution_id[i] = line["solution_id"];
            i ++;
        }
        cnt = i;
    }
    void changeEnvironment () {
        passwd *running_user;
        running_user = getpwnam("judger");
        chdir("/home/judger");
        chroot("/home/judger");
        setuid(running_user -> pw_uid);
    }
    void judgeCode (Mysqlc &db) {
        int running_cnt = 0;
        int err = 0;
        int pid;
        int i = 0;
        int j;
        int num;
        while (i < cnt) {
            while (running_cnt < max_running && i < cnt) {
                pid = fork();
                if (pid < 0) {
                    err ++;
                    if (err == max_running) {
                        //write something output here
                        exit(1);
                    }
                    continue;
                } else if (pid == 0) {
                    // cout << running_cnt << endl;
                    num = 0;
                    for (j = 0; j < max_running; j ++) {
                        if (running_pid[j] == -1) {
                            num = j;
                            break;
                        }
                    }
                    judgeClient(i, num);
                } else {
                    running_cnt ++;
                    i ++;
                    for (j = 0; j < max_running; j ++) {
                        if (running_pid[j] == -1) {
                            running_pid[j] = pid;
                            break;
                        }
                    }
                }
                err = 0;
            }
            pid = wait(NULL);
            for (j = 0; j < max_running; j ++) {
                if (running_pid[j] == pid) {
                    // cout << "Client" << j << " is closed" << endl;
                    running_pid[j] = -1;
                    break;
                }
            }
            running_cnt --;
        }
        while (running_cnt) {
            pid = wait(NULL);
            for (int j = 0; j < max_running; j ++) {
                if (running_pid[j] == pid) {
                    // cout << "Client" << j << " is closed" << endl;
                    running_pid[j] = -1;
                    break;
                }
            }
            running_cnt --;
        }
    }
protected:
    void judgeClient (int id, int num) {
        execl("/judger/judger_client/judger_client", "judger_client", intToStr(solution_id[id]).c_str(), intToStr(num).c_str(), NULL);
    }
};